{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"3rd Generation Java Inversion of Control (IoC) / Dependency Injection (DI)","body":"## silk\r\n\r\n### Java Dependency Injection\r\n\r\n#### 100%\r\n- **Configuration by code**\r\n- **separated from your application code** (no dependency will ever point to silk except the configuration code itself)\r\n- no further runtime dependencies (libraries) needed\r\n- transparent (renaming refactorings cannot cause problems)\r\n\r\n#### Less _Magic_\r\n- no AOP\r\n- no accessible mutable state\r\n- no reconfiguration \r\n- no annotations (easy to add but why would you want to ?)\r\n\r\n#### `if`-less Modularity\r\n- powerful modularisation with bundles and modules\r\n- allows: repeated install of bundles (also circular), uninstall bundles\r\n- configuration through editions, features and constant-properties\r\n\r\n#### Efficient\r\n- fast bootsrap\r\n- declarative dependency descriptions (using a guice like binding-builder)\r\n- about 120 KB jar archive\r\n- does the right thing (see below)\r\n\r\n#### Further Characteristics\r\n- data driven (core uses a lot Value Objects)\r\n- pushes for immutability: enforces Constructor-Injection\r\n- multi-binds\r\n- allows use of generics in managed instances without pain\r\n- typesafe (not fully typesafe with generics)\r\n- easy to extend (e.g. with Set or List support)\r\n- decouples application layers through services\r\n- Unit-testable ","name":"Silk","google":""}